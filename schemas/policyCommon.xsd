<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
           xmlns:vc="http://www.w3.org/2007/XMLSchema-versioning"
           xmlns:xerces="http://xerces.apache.org"
           xmlns:saxon="http://saxon.sf.net/"
           vc:minVersion="1.1"
           elementFormDefault="qualified">

  <xs:complexType name="policyBase">
      <xs:all>
        <xs:element minOccurs='0' name="DisplayName" type="DisplayName"/>
        <xs:element minOccurs='0' name="Description" type="Description"/>
        <xs:element minOccurs='0' name="FaultRules" type="FaultRules"/>
        <xs:element minOccurs='0' name="Properties" type="Properties"/>
      </xs:all>
      <xs:attribute name="async" type="xs:boolean"/>
      <xs:attribute name="continueOnError" type="xs:boolean"/>
      <xs:attribute name="enabled" type="xs:boolean"/>
      <xs:attribute name="name" use="required" type="xs:string"/>
    <xs:assert test="count(DisplayName) le 1 and
                     count(Description) le 1 and
                     count(FaultRules) le 1 and
                     count(Properties) le 1"/>
  </xs:complexType>

  <xs:simpleType name="DisplayName">
    <xs:restriction base="xs:string"/>
  </xs:simpleType>

  <xs:simpleType name="Description" >
    <xs:restriction base="xs:string"/>
  </xs:simpleType>

  <xs:complexType name="Properties">
    <xs:sequence>
      <xs:element name='Property' minOccurs="0" maxOccurs="unbounded" type="PropertyType"/>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="PropertyType">
    <xs:simpleContent>
      <xs:extension base="xs:string">
        <xs:attribute name="name" type="xs:string" use="required"/>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>

  <xs:complexType name="FaultRules">
    <xs:sequence>
      <xs:element minOccurs="0" maxOccurs="unbounded" name="FaultRule" type="FaultRuleType"/>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="FaultRuleType">
    <xs:choice maxOccurs="unbounded">
      <xs:element name="Condition" type='xs:string'/>
      <xs:element name="Step" type='Step'/>
    </xs:choice>
    <xs:attribute name="enforceAlways" type="xs:boolean"/>
    <xs:attribute name="name" type='xs:string'/>
    <xs:assert test="count(Step) ge 1 and count(Condition) le 1"/>
  </xs:complexType>

  <xs:complexType name="Step">
    <xs:choice maxOccurs="unbounded">
      <xs:element name="Condition" type='xs:string'/>
      <xs:element name="Name" type='xs:string'/>
    </xs:choice>
    <xs:assert test="count(Name) = 1 and count(Condition) le 1"/>
  </xs:complexType>

  <xs:complexType name="propertyBean">
    <xs:simpleContent>
      <xs:extension base="xs:string">
        <xs:attribute name="ref" type="nonEmptyString"/>
        <xs:attribute name="type" type="xs:string"/> <!-- not sure if ever used -->
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>

  <xs:simpleType name="resourceURL">
    <xs:restriction base="xs:string">
      <xs:assertion test="(string-length($value) - string-length(replace($value, '://', ''))) eq 3"/>
      <xs:assertion test="substring-before($value, '://') = ('jsc', 'java',
                          'graphql', 'properties', 'js', 'py', 'oas','template',
                          'wsdl', 'xsd', 'xsl')"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="nonEmptyString">
    <xs:restriction base="xs:string">
      <xs:assertion test="string-length($value) ge 1"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="possiblyEmptyString">
    <xs:restriction base="xs:string">
      <xs:pattern value="\S*"/>
    </xs:restriction>
  </xs:simpleType>

<!--
  <xs:complexType name="Parameters">
    <xs:sequence>
      <xs:element minOccurs='0' maxOccurs="unbounded" name="Parameter" type="Parameter"/>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="Parameter">
    <xs:attribute name="name" use="required" type="xs:NCName"/>
    <xs:attribute name="ref" use="optional" type="xs:NCName"/>
  </xs:complexType>
-->

  <xs:complexType name="refOnly">
    <xs:simpleContent>
      <xs:extension base="xs:string">
        <xs:attribute name="ref" use="required" type="xs:NCName"/>
        <xs:assert test=". = ''" />
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>

  <xs:simpleType name="nonJavaResourceURL">
    <xs:restriction base="resourceURL">
      <xs:assertion test="not(substring-before($value, '://') = ('java'))"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:complexType name="messagePayload" mixed="true">
    <xs:openContent mode="interleave">
      <xs:any namespace="##any" processContents="skip"/>
    </xs:openContent>
    <xs:attribute name="contentType" type="xs:string" use="optional"/>
    <xs:attribute name="variablePrefix" type="xs:string" use="optional"/>
    <xs:attribute name="variableSuffix" type="xs:string" use="optional"/>
    <xs:attribute name="template" type="templateResourceURL" use="optional"/>
  </xs:complexType>

  <xs:simpleType name="templateResourceURL">
    <xs:restriction base="resourceURL">
      <xs:assertion test="substring-before($value, '://') = ('template')"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:complexType name="sslInfo">
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element name="Enabled" type='xs:boolean'/>
      <xs:element name="Enforce" type='xs:boolean'/>
      <xs:element name="ClientAuthEnabled" type="xs:boolean"/>
      <xs:element name="KeyStore" type="xs:NCName"/>
      <xs:element name="KeyAlias" type="xs:NCName"/>
      <xs:element name="IgnoreValidationErrors" type='xs:boolean'/>
      <xs:element name="CommonName" type="xs:NCName"/>
      <xs:element name="TrustStore" type="xs:NCName"/>
      <xs:element name="Ciphers" type="ciphersType"/>
      <xs:element name="Protocols" type="protocolsType"/>
    </xs:choice>
    <xs:assert test="count(Enabled) le 1 and
                     count(Enabled) le 1 and
                     count(ClientAuthEnabled) le 1 and
                     count(KeyStore) le 1 and
                     count(KeyAlias) le 1 and
                     count(IgnoreValidationErrors) le 1 and
                     count(CommonName) le 1 and
                     count(TrustStore) le 1 and
                     count(Ciphers) le 1 and
                     count(Protocols) le 1"/>
  </xs:complexType>


  <xs:complexType name="ciphersType">
    <xs:sequence>
      <xs:element minOccurs="0" maxOccurs="unbounded" name='Cipher' type="xs:string"/>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="protocolsType">
    <xs:sequence>
      <xs:element minOccurs="0" maxOccurs="unbounded" name='Protocol' type="xs:string"/>
    </xs:sequence>
  </xs:complexType>

  <xs:simpleType name="castableAsInteger">
    <xs:restriction base="xs:string">
      <xs:assertion test="$value castable as xs:integer"/>
    </xs:restriction>
  </xs:simpleType>

</xs:schema>
